#!/usr/bin/env node

/**
 * Cache CodeMirror ES modules locally
 * Downloads properly bundled ES modules from CDN and saves them locally
 */

import https from 'https';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Modules we need for the CodeEditor
const modules = [
  { name: 'codemirror', version: '6.0.1', file: 'codemirror.js' },
  { name: '@codemirror/language', version: '6.10.1', file: 'index.js' },
  { name: '@codemirror/lang-javascript', version: '6.2.2', file: 'index.js' },
  { name: '@codemirror/theme-one-dark', version: '6.1.2', file: 'index.js' },
  { name: '@codemirror/view', version: '6.26.3', file: 'index.js' },
  { name: '@codemirror/state', version: '6.4.1', file: 'index.js' },
  { name: '@codemirror/commands', version: '6.3.3', file: 'index.js' },
  { name: '@codemirror/search', version: '6.5.6', file: 'index.js' },
  { name: '@codemirror/autocomplete', version: '6.15.0', file: 'index.js' }
];

const cacheDir = path.join(__dirname, '..', 'public', 'lib', 'codemirror');

// Create cache directory
function ensureDir(dir) {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
}

// Download a file from URL
function download(url, dest) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(dest);
    
    https.get(url, (response) => {
      if (response.statusCode === 302 || response.statusCode === 301) {
        // Follow redirect
        file.close();
        download(response.headers.location, dest).then(resolve).catch(reject);
        return;
      }
      
      if (response.statusCode !== 200) {
        file.close();
        fs.unlinkSync(dest);
        reject(new Error(`Failed to download ${url}: ${response.statusCode}`));
        return;
      }
      
      response.pipe(file);
      
      file.on('finish', () => {
        file.close(resolve);
      });
    }).on('error', (err) => {
      fs.unlinkSync(dest);
      reject(err);
    });
  });
}

async function cacheModules() {
  console.log('üì¶ Caching CodeMirror modules...\n');
  
  ensureDir(cacheDir);
  
  for (const module of modules) {
    const fileName = module.name.replace('@', '').replace('/', '-') + '.js';
    const filePath = path.join(cacheDir, fileName);
    
    // Skip if already cached
    if (fs.existsSync(filePath)) {
      console.log(`‚úì ${module.name} (already cached)`);
      continue;
    }
    
    // Use esm.sh CDN which provides proper ES modules
    const url = `https://esm.sh/${module.name}@${module.version}`;
    
    console.log(`‚¨áÔ∏è  Downloading ${module.name}...`);
    
    try {
      await download(url, filePath);
      console.log(`‚úì ${module.name}`);
    } catch (error) {
      console.error(`‚úó Failed to download ${module.name}: ${error.message}`);
      process.exit(1);
    }
  }
  
  // Create an index file that exports all modules
  const indexContent = `/**
 * CodeMirror modules cached locally
 * Generated by cache-codemirror.js
 */

// Core
export * from './codemirror.js';
export * as CM from './codemirror.js';

// Re-export individual modules
export * as view from './codemirror-view.js';
export * as state from './codemirror-state.js';
export * as commands from './codemirror-commands.js';
export * as language from './codemirror-language.js';
export * as search from './codemirror-search.js';
export * as autocomplete from './codemirror-autocomplete.js';
export * as javascript from './codemirror-lang-javascript.js';
export * as oneDarkTheme from './codemirror-theme-one-dark.js';
`;

  fs.writeFileSync(path.join(cacheDir, 'index.js'), indexContent);
  
  console.log('\n‚úÖ All modules cached successfully!');
  console.log(`üìÅ Cache location: ${cacheDir}`);
}

// Run the caching
cacheModules().catch(console.error);